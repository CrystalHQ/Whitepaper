
?
Table of Contents
ABSTRACT	3
BACKGROUND	3
CROWDSOURCING	3
WISDOM OF THE CROWDS	4
INTERET REPUTATION	4
COMBINING REPUTATION AND CROWDSOURCING	4
ETHEREUM	4
SUMMARY OF THE CRYSTAL PLATFORM	5
REPUTATION MEASURES	5
COMMUNITIES	5
CONTESTS	5
AN EXAMPLE	6
REPUTATION	6
REPUTATION AND RATINGS STANDARD	7
VALUES-BASED REPUTATION	7
VALUE TAGS	7
VALUE SCORES	8
SKILLS-BASED REPUTATION	12
REPUTATION TOKENS	12
CRYSTAL CONTESTS	16
GOVERNANCE	22
GOVERNANCE STANDARD	23
VALUE-WEIGHTED VOTING	23
EXPERTS	23
CLIENTS	24
REPUTARCHY	24
REPUTARCHY STEP BY STEP	25
REPUTARCHY IN ACTION	25
USE CASES OF REPUTARCHY	26
CRYSTALDAO	26
MAKING A PROFIT	27
REFERRAL INCENTIVES	27
CRYSTALDAO GOVERNANCE ACTIONS	27
COMMUNITY GOVERNANCE	28
CREATING A COMMUNITY	28
COMMUNITY GOVERNANCE ACTIONS	29
USE CASES	29
DECENTRALIZED APPLICATIONS	29
RATING AND GRADING	30
COLLABORATIVE CROWDSOURCING	30
PORTABLE REPUTATION	30
DECISION MAKING	30
FORECASTING	30
AI AUGMENTATION	31
CONCLUSION	31
APPENDIX A - MATHEMATICAL BUILDING BLOCKS	31
UTILITY FUNCTIONS	31
SCORING RULES AND DIVERGENCE MEASURS	32
POOLING ALGORITHM	33
MONTE CARLO SIMULATION	33
APPENDIX B – CRYSTAL’S STANDARDS	33
IDENTITY STANDARD	33
FUNCTIONS	33
RDF DEFINITION	33
REPUTATION STANDARD	33
Functions	34
TOKEN TO REPUTATION MAPPING STANDARD	34
CONTEST STANDARD	34
GOVERNANCE STANDARD	34
UTILITY FUNCTION STANDARD	34

CRYSTAL WHITE PAPER
A decentralized governance and reputation system for building collaborative communities
ABSTRACT
We present a method to crowdsource expertise and technical tasks,leading to better outcomes at a lower cost than traditional contracting.This method naturally leads to credible reputation metrics that measure an individual’s values and skills,and can be further extended to provide decentralized governance structures for organizations - a mechanism we call reputarchy.
Two distinct reputation types are used to rank individuals: values and skills.By using these reputations types in crowdsourced contests,we can optimize results according to an arbitrary utility function and update the individual’s reputation accordingly.This reputation can be transferred between communities without diluting its validity,allowing for the creation of a universal reputation network.
Using cryptocurrencies and programmable blockchain smart contracts,a well-designed competition marketplace can incentivize competition and cooperation.  This system,combined with several distinct contest types,can be used to emulate most crowdsourced communities and marketplaces.  Such communities are a microcosm of our vision: a global collaborative network,representing every conceivable aspect of human ingenuity and judgement.
BACKGROUND
CROWDSOURCING
The idea of paying large group of diverse individuals to solve a problem has been around for hundreds of years.In 1714,the British government offered £20,000 (equivalent to ~$3,500,000 today) to the first individual that could create a method to determine accurate longitude within half a degree .  This was one in a long line of instances where governments used crowdsourcing contests to spur creativity.Nearly 50 years later in 1761 the problem was solved in two separate ways using two separate measurement methods.
WISDOM OF THE CROWDS
Another large leap regarding crowdsourcing was made in 1907,by Francis Galton.  He realized that by taking the median guess of an ox’s weight among a diverse crowd of guessers,he could arrive at a number very close to the true value of the ox’s weight .  This marked the beginning of the realization that crowdsourcing could be used not just for creativity,but for accuracy as well.This idea came to be known as the wisdom of the crowd.Today,the concept of crowdsourcing and wisdom of the crowd is used to power some of the most popular websites on the internet,including Wikipedia,Reddit,and StackOverflow.
INTERET REPUTATION
In combination with the rise in crowdsourcing,there has been a surge of interest in internet reputation metrics.One early example was eBay’s reputation system,which combined positive and negative feedback.  eBay moved show percent negative feedback in 2003 ,a tacit recognition that their reputation system was having unintended consequences.Similar realizations ultimately led to the development of several new reputation algorithms designed to resist manipulation,with one of the most popular,EigenTrust,being cited over 4,000 times .
COMBINING REPUTATION AND CROWDSOURCING
As reputation and crowdsourcing began to evolve in tandem,game theorists began wondering how they could be used together to elicit better outcomes from the crowd.  In 2011,the United States government agency IARPA created the Aggregative Contingent Estimation project (ACE) to answer such questions .  One particular participant in ACE,the Good Judgement Project,was able to achieve spectacular results,using civilians to outperform CIA analysts by 30% 
ETHEREUM
In late 2015,Ethereum launched,a platform for creating smart contracts on the blockchain.  For the first time Decentralized applications became as easy to build as standard web applications,and money was as easy to program as any other piece of data.This represented a for the first time a way to store reputation that was immutably linked to identities,a feature previously found only in real life reputation.The programmable money aspect also provided intriguing possibilities for incentivized crowdsourcing.
While Ethereum represents a huge paradigm shift in the power to create applications that don't have a centralized failure point,many have pointed out that there are still fundamental limitations to the type of decentralization that can be achieved .  In particular,critics have noted that any connection to external data feeds,and any logic that requires human judgement,cannot be decentralized purely with smart contracts.In addition to traditional uses of crowdsourcing and reputation,Crystal can also be used for decentralized applications that fill this hole.
SUMMARY OF THE CRYSTAL PLATFORM
REPUTATION MEASURES
Crystal is a platform that aims to connect communities of experts on the internet into a global network with quantifiable reputation scores for both the values they exhibit as well as the skills they possess.  Values are ranked through a web-of-trust system,and are assumed to be transitive meaning those whom exhibit values are assumed to be better at judging those same values in others.  Skills are ranked by a system of competition where experts who perform well earn reputation from those who perform poorly.In this way skills based-reputation measures the relative skill-set of an expert compared to other experts.
COMMUNITIES
Both values-based reputation and skills-based reputation exist in the context of a community,which is defined as a group of people who share similar values and objectives.  These communities are a form of organization that are self-organized around economic and social incentives.
Checks and balances in the Crystal protocol encourage community collaboration.Community core values are explicitly defined,but norms for what those values mean are flexible and moderated by our value score algorithm.  Community members share in rewards and common good to the extent that they are recognized by their peers through reputation and are rewarded percentages of income based on outcomes derived from contests and reputation score.
Crystal is unique in its ability for experts to transfer between communities while maintaining a percentage of reputation in proportion to how similar the two communities are to each other.This ability is what allows Crystal to be a global measure of reputation,instead of a series of one off metrics such as Reddit karma or STEEM power.
CONTESTS
Contests are at the center of the Crystal protocol.In practice,a contest creator (client) is seeking a good (service or product) to be provided at the maximum level of quality and minimum of cost possible in the marketplace.A contest can be seen as a task to be fulfilled or challenge for experts to solve.The client will define contests which describes what type of results the client desires,the type of work involved and the bounty awarded for the winners.The tasks are then offered to a community of experts,who are economically incentivized to work as a team to generate the best submissions.Teams utilize experts to analyze,inform,or rate creative output of value to the client.
While this crowdsourced work can be traditional knowledge work such as creating a website design,contests can also be for things not traditionally considered crowdsourcing.Examples include incentivizing writing social media posts that get upvoted or comments that are considered insightful.
At the end of the decision making process,the contest reward is split between all experts who helped complete the requirements of the contest,with more value going to those experts who performed better.
AN EXAMPLE
As a concrete example of how Crystal could be used,let’s take the problem of finding experts who can write and audit smart contract code.The hack of The DAO exposed this as an unsolved problem in the Ethereum ecosystem.  Using Crystal,one would create a “smart contract security” community.  This community’s reputation metrics and contests would then serve as the backend for a number of important decentralized applications (dapps) needed in the ecosystem such as:
?	A dapp for hiring qualified people to code your custom smart contract.
?	A dapp for paid,crowdsourced  smart contract security audits from qualified professionals 
?	A dapp for decentralized reputation-based commit access to open source smart contract projects
?	A dapp to get advice from other smart contract coders on best practices (with the best advice from the most knowledgeable coders being ranked the highest)

Because each of these dapps would share the same reputation metrics and crowdsourcing tools,each one would in turn improve the accuracy and utility of the other dapps,and the ecosystem as a whole would benefit from new dapps built on the platform in a way not seen with siloed reputation metrics.
This example of a smart contract security community will be used throughout the paper to explain the different parts of the Crystal protocol.
REPUTATION
Crystal’s base reputation layer is a general purpose reputation and rating standard,which is a simple standard interface for accessing and understanding reputation and ratings through smart contracts,similar to the ERC20 token standard .On top of this base layer we introduce two reputation metrics that represent the two types of reputation typically used in real life scenarios.One is for values-based reputation,in which individual entities are being rated directly on how other people rate them on community values like honesty or kindness.  The second is for skills-based reputation,in which an individual skills are ranked based on the output of their skills such as the ability to write forum posts or debug code.
REPUTATION AND RATINGS STANDARD
Crystal’s reputation and ratings standard is a set of common functions that allow smart contracts to interact with ratings and reputation in a consistent way,thus allowing them to keep the same interface for their smart contract even if they change reputation metrics.
The standard is simple,and is built on top of Crystal’s notion of communities.It gives several functions to return information about the reputation or rating metric such as what it should be called,the type of reputation it is (categorical or numerical),and how it should be displayed (limits,units,etc.).
Any community can opt-in to having their members tracked using that reputation metric,and a standard function will return the value of a member's reputation within that community.Finally,if the reputation or rating involves compiling ratings from users,it allows users to assign ratings to each-other and content in consistent ways as well.
On top of this flexible system is built Crystal’s foundational reputation metrics: its values-based and skills-based reputation metric.
VALUES-BASED REPUTATION
Existing ratings and reputation systems such as Reddit are able to classify the type of content that the community likes,but are not able to identify the type of people that should hold influence in their community according to community values.This means that any open community that uses such a content centric system will be driven by populist values and conflicts.
Crystal’s values-based reputation is a fundamental type of reputation that records and maps human values in a trust graph.Using values-based reputation,communities can choose core values that they want their members to hold.Core values influence things such as ratings or stake in community decisions.We calculate a community ‘affinity’ score and create incentives for individuals to gain influence in the community in alignment with the values of that community.Values-based reputation eliminates trolling and provocative behavior and can enable application of moral decision-making,such as deciding what content should not be allowed on a platform.
VALUE TAGS
Value tags are simple text representations of the value that will be used in a values-based reputation rating.Each tag will be registered in a global registry along with a hash of a longer free-form description of the value.Long form descriptions can be fuzzy and general,or precise enough to be used in a contractual agreement.For the purpose of Crystal reputation calculation,tags and descriptions are arbitrary and only have meaning in the context of the reputation trust graph of the community.The Crystal algorithms will work with any language,jargon,or concept.
Tags and descriptions can be created and registered at will,or existing tags in the global registry can be reused if they are a good fit for a community.  While users can rate individuals and give personalized local scores to any user for any value,global value scores are calculated only for values which are rated as a core value by some community.
VALUE SCORES
A user can have a value score for every value tag that exists on the Crystal platform.They are a permanent record for the account that earns them,and hold a value between 0 and 1.Value scores above .5 can generally be seen as having that value,while value scores below .5 can be seen as the reverse.  Intermediate values can be seen as degrees of that value that are had.
HOW VALUE SCORES WORK
Value scores represent specific qualities that users of the system hold.They're computed by combining versions of Relative Rank  and EigenTrust
++ ,two Sybil-attack resistant versions of the EigenTrust algorithm that normalizes based on the number of ratings each node has been given,and incorporate the structure of feedback that users get.
EIGENTRUST
The EigenTrust algorithm is based on the notion of transitive trust: A peer will trust nodes trusted by those nodes it trusts (and so on).
The EigenTrust algorithm as described in Resisting Sybils in Peer-to-peer Markets - Traupman,et.al,is a four step process:

1.	A local trust value is computed for every node the originating node interacts with.This is done by taking the number positive interactions with that node minus the number of negative interactions.  Thus the local trust value l  from rating peer i to rated peer j is calculated as: 
 
l_ij=sat(i,j) - unsat(i,j) 

2.	This local trust score is then normalized over all local trust scores of nodes that this node has rated,such that all the local trust scores sum to 1,with any trust scores below 0 being dropped entirely,
The normalized trust score c between peers i and j is thus calculated: 

	c_ij=  (max(l_ij,0))/(?_j??max(l_ij,0)?) 

3.	These normalized local trust scores are then aggregated,by assuming that trust is transitive.  For a peer k that peer i has never met,peer i will add the normalized trust scores of all peers j whom have met peer k,and weight those scores by peer i’’s own trust in peer j.This aggregated trust score t is calculated as: 
 
t_ik=?_j??c_ij c_jk ?

4.	This process is continued outward,such that peer k becomes the new peer j.  Eventually,the node has a complete view of the network.  This can also be viewed as a probabilistic process,in which following nodes with higher t’s will result in landing on a more trustworthy peer.

The authors note that for networks with a sufficiently large set of nodes,the aggregated local trust vector t always converges to the same number,regardless of which node i it’s calculated from.  This means that the trust vector t represents a global notion of trust that the network places on any given node.
START SETS
The authors also note that there are a few problems with the simple algorithm above.Firstly,malicious nodes can create networks specifically designed to increase the score count between each other,by “trapping” the probabilistic crawler mentioned above in a web of trust links.  
Secondly,if a node has not rated any peers (or has rated all peers negatively) cij will be undefined,making the algorithm impossible to compute.
They solve both these problems with the notion of a trusted “start set.”  This start set represents a set of trustworthy peers that have not been compromised.  To remove the chance of the algorithm being trapped in a Sybil compromised network,they make sure that every peer has at least some small amount of trust allocated towards the start set,such that on any given step the algorithm can exit the malicious network by returning to the start set.
If a node has not rated any peers in a positive way,then that peer is treated as having implicitly given its trust to the start set,thus avoiding dead ends in the network.
EIGENTRUST++
EigenTrust
++ suggests three ways to increase the attack resilience above classic EigenTrust.  Firstly,it adds the concept of “feedback similarity” to its trust propogation neutralizing a class of attacks that works by acting honestly,while rating dishonestly (in order to increase your reputation relative to peers who both rate and act honestly).    Secondly,it incorporates information about how many feedbacks a peer has received,allowing for peers with lots of negative feedback to be treated differently than peers with low amounts of feedback.  Thirdly,it creates thresholds for trust propagation,reducing the possibility that dishonest collectives can pass on reputation to honest nodes,and vice versa.
For the purposes of this paper,we utilize EigenTrust
++’s feedback similarity rating,and linear threshold,but don’t use it’s incorporation of feedback number.This is because we include a different normalization procedure based on feedback number,described below in Relative Rank.
FEEDBACK SIMILARITY
EigenTrust
++ notes that a peer can mailiciously attack the network by always acting honestly when interacting when interacting with high reputation peers,but interacting dishonestly in other situations.  It solves this problem by creating a “feedback similarity” metric which allows honest nodes to detect this type of behavior,and propagate less trust to nodes that engage in it.  It has an added bonus for our algorithm,as it captures the notion of subjective values – a node will trust other nodes that see the value in the same way that it does.
This is incorporated into EigenTrust with the following steps:
1.	Average all local trust ratings together,between all nodes w that nodes u and v have both rated
tr(u,w)=  (?_(i=1)^n???tr?_i (u,w)?)/n
tr(v,w)=  (?_(i=1)^n???tr?_i (v,w)?)/m
Where n and m are the number of transactions between the two peers.
2.	Compute the similarity between two nodes u and v by computing the sample standard deviations of all node ratings that they have in common.
sim(u,v)=1- ?((?_(w?comn(u,v))??(tr(u,w)-tr(v,w))?^2 )/(n+m))
3.	Divide similarity among all nodes m that have a similarity score from node u to create a normalized feedback score.
feed(u,v)=(sim(u,v))/(?_(i=1)^(R(m))??sim(u,m)?)
4.	Define feedback credibility as a metric that weights each normalized trust score cij by each normalized feedback score feed(i,j).
	
fc(i,j)=c_ij?feed(i,,j)
5.	Redefine local trust value lij in terms of it’s normalized counterpart that includes feedback credibility.
l_ij={?((max?(fc(i,j),0))/(?_(m=1)^(R(i))??max?(fc(i,m),0)?) ?(if?_(m=1)^(R(i))?max??
(fc(i,m),0)  ?0?   @otherwise)@0)?
6.	Redefine initial aggregated trust using the new definition of local trust given above.
Type equation here.

RELATIVE RANK
1.	Run EigenTrust (as described above).
2.	Separate start-set from non-start-set users
3.	Separate non-start set members into groups according to how many k feedbacks each member has received (both positive and negative) and in each group choose the member with the highest trust vector rk
4.	Find a line of best fit for all pairs (k,rk),and determine the slope m and intercept b of that line.
5.	Define a  non-start set node i’s relative rank as  (r_i-b)/mk
6.	Repeat steps 3 - 5,but for the start set.
VALUE RANK	
Value rank,our algorithm for calculating the values that an individual holds,makes two minor changes to the original relative rank algorithm.It makes local ratings more granular,and it allows for multiple start sets.
GRANULAR LOCAL RATINGS
MULTIPLE START SETS
In the original relative rank,a single start set is used.  A related algorithm is also given called RAW which allows for personalized start sets.  In value rank,multiple start sets can be created,one for every community that ranks that value as their core value.  This captures the notion of values as relative interpretations that exist within community context,while still striking a good balance with computational cost.
COMMUNITY LEVEL VALUE SCORES
The Relative Rank algorithm used to calculate value scores has the ability to calculate different value scores based on what group of initial "trusted users" it calculates from.This is ideal for growing out a global trust graph while allowing individuals to build value scores faster in the community they're a part of.The ultimate goal for value-based reputation in Crystal is to build a global trust graph that spans a diverse network of communities and scales to planetary levels.
COMMUNITY CORE VALUES
In Crystal,each community can choose to create its own set of core values,and for each of those core values can define one or more community members they consider paragons of that value.This becomes the initial start set from which the trust graph grows.As new members on-board and participate in Novice Matches they are rated by the existing members thereby populating new nodes in the trust graph.
AFFINITY SCORE
As individuals begin to get rated in a community’s core values,we begin to get a sense of their affinity for the community.  We can mathematically represent this affinity by averaging their score along all core values.  We call this average of all community core values for a specific user that user’s affinity score.The affinity score is used throughout the Crystal platform to make sure that individuals who have influence in the community are in alignment with the values of that community.
VALUE SCORES IN ACTION
Let’s imagine how value scores might be used in our smart contract security community.
Firstly,the community as a whole would choose a set of core values.For each set of core values the community would choose a start set of people they considered paragons of that value.  Let’s assume for examples sake that the core values the community chose were honesty,integrity,and thoroughness.These core values would then ensure that new members trying to become smart contract experts had to have an affinity with those values,through use of the affinity score.For users who were already on the Crystal platform,their influence on the governance of the community would be limited based on their affinity score.
Secondly,value scores could be used in our crowdsourced commit access Dapp to make sure that those who participated matched the values of that open source project.For instance,if an open source project valued compromise,they could limit the influence of any given expert's ability to push through a commit based on how high that expert’s “willingness to compromise” value score was.
Finally,value score could be used in a subjective way in our smart contract coder hiring dapp to choose candidates that would mesh with a given project’s value system.One can imagine first filtering by candidates who share the hirer’s values,and then sorting by skills-based reputation tokens to find the most talented candidate within that group.
SKILLS-BASED REPUTATION
Skills-based reputation is the second foundational type of reputation.  While values-based reputation answers the question “What type of person are you?” skills-based reputation answers the question “What are you good at?”  
This is a hard question to answer because it’s incredibly hard to judge unrealized talent.To solve this problem,Crystal transforms the “What are you good at?” question to an easier question: “How good was your performance?”  Thus skills-based reputation in Crystal is based on the ratings of the performance that an expert produces.
This raises a secondary question: Who rates the performance? To answer this question,Crystal creates two additional types of meta-skills based reputation: The skill of explaining why a performance is good (critiquing),and skill that can rank how good a performance is (grading).
GRADING AND CRITIQUING AS FORECASTING
When the meta-skills of grading and critiquing are used before the outcome of an event is known (example: a battle plan is critiqued and graded before the battle),they correspond to the ability to both understand and predict the future.  
This type of crowdsourcing-based forecasting combined with reputation has been shown to outcompete established experts like CIA analysts by 30% ,and is comparable with the accuracy of prediction markets when the proper algorithms are used .
It is this ranking of forecasting ability that gives these meta-skill reputation tokens (clarity tokens and accuracy tokens) equal value to the primary skill-based token creativity tokens.
REPUTATION TOKENS
To represent the three different skills that experts may have within their domain,Crystal splits reputation into three separate tokens.These tokens represent three separate ways you can enter a contest. 

1.	You can create content for the contest.This will earn you a type of reputation called creativity tokens.
2.	You can critique the content in the contest,this will earn you a type of reputation called clarity tokens.
3.	You can rate the content in the contest,this will earn you a type of reputation called accuracy tokens.
CREATIVITY TOKENS
To earn creativity tokens one must generate new submissions to the contest.  If those submissions perform well according to the rules of the contest,one will earn more creativity tokens.Submissions don't have to be in the form of text.  An idea could just as easily be presented in the form of code,blueprints,or mockups - allowing for creativity tokens to be used for arbitrary crowdsourcing applications.
ACCURACY TOKENS
To earn accuracy tokens,one must evaluate how well submissions meet the variables that go into the utility function specified by the client.  Evaluators provide probability estimates among all these variables for the options generated by creatives.This allows the client to make the decision-theoretically optimal decision.
CLARITY TOKENS
To earn clarity tokens,one must explain the pros and cons of different submissions.  You can think of these pros and cons as analogous to comments on traditional crowdsourcing sites.However,these explanations do not just have to be in text,and can be in arbitrary media depending on the application.While the client gets to see all explanations by every critic,the explanations are only shown to evaluators on a probabilistic basis to enable linear regression analysis of the explanation’s impact.This allows clarity tokens to get redistributed to those who most help the predictors make accurate predictions.
CRYSTAL CLEAR TOKENS 
TRANSFORMING AND TRANSFERRING TOKENS
One of the current problems with internet based reputation is that accounts can be easily sold if not tied to strong identities,thus making it impossible to know if reputation was earned or simply purchased.
Crystal solves this problem by allowing the tokens used for reputation to be transformed into sellable tokens,while making the reputation metric itself unassailable.The way it does this is by incentivizing the sale of or transformation of reputation tokens only to people who deserve those tokens.  By doing this,it gives people honest ways to profit from reputation tokens they no longer have a use for.
SIMILARITY SCORE
Every Community has a similarity score that 
EXCHANGE RATE
In a typical currency,the exchange rate is determined by relative demand for two different ideas.  Crystal,being a reputation token,has an entirely different notion of exchange rate that mimics how reputation works in real life.  Crystal creates a simple asymmetric metric that shows how “similar” two different skills are,and then uses this equation to create an exchange rate when converting from one to the other.  This is done using linear regression,as described below,assuming the user is exchanging tokens from community j to community k.
1.	Find the set of all n people whose tokens t in community k are greater than 0.
2.	For each of those people,create the pair (tj,tk) where each t is the amount of tokens those people have 
3.	Use linear regression to calculate the line of best fit for all n pairs.  Plug in the amount of tokens t to get the proper amount of tokens.
exchrate(j,k,t)=(n?_(i=1)^n??(t_ji?t_ki )-???t_j?? ??t_k ?)/(?(n(????t_j?^2)-(???t_j )?^2 ?)  ??(n(????t_k?
^2)-(???t_k )?^2 ?)  )?(t)+(???t_k-(n?_(i=1)^n??(t_ji?t_ki )-???t_j?? ??t_k ?)/(?(n(????t_j?^2)-(???t_j )?
^2 ?)  ??(n(????t_k?^2)-(???t_k )?^2 ?)  )?(???t_j)??)/n
Note that this exchange rate is asymmetric because t > 0 for community k,but t 
? 0 for community j.  This has the effect of correcting the imbalanced exchange rate of large communities,which likely will have high exchange rates simply due to chance. 

TOKEN DEACTIVATION
TRANSFERRING WITH EXPECTED TOKENS
When calculating how many tokens should be deactivated during the sale or transfer of a token,the user’s entire token portfolio,along with the exchange rate,is used to calculate an “expected tokens” value for the community they’re moving into.  Every token a user holds in all communities (except the community for which tokens are being bought) is multiplied by its percent similarity with the community token being bought.  These numbers are then averaged together to calculate the ‘expected tokens’ that the user should have in a given community.The expected tokens e are computed for all n communities the user u belongs to with the following equation:
exptok(u,c) =  (?_(i=1)^n??exchrate(?j_iu,c)t?_iu ?)/n
Where s equals the similarity score between community j and the desired community c and t equals the number of tokens in community i.
Any tokens purchased that exceed this number are deactivated.  
This discourages whales in a community from buying or transforming tokens to cement their advantage,because they are likely already above their allotment of expected tokens.It also discourages non-experts from buying influence in contests,because their expected tokens are likely very low.What it encourages is experts from similar communities who don’t want to sacrifice tokens through transformation to buy tokens from communities they should do well in.This transfer of crypto-reputation to people who deserve that reputation in real life is the exact behavior we’d like to encourage.  
TRANSFORMING TOKENS USING EXCHANGE RATE
When transforming tokens from one community to another (or one contest type to another),a slightly different procedure is used.  The exchange between the two communities is used to figure out how many tokens are deactivated in each transfer.Instea
This procedure holds up to the point at which the user reaches their expected tokens for a community.After that point,100% of transformed tokens are deactivated.
transf(j,k,t)={?(simscore(j,k)?t@0)?  (    simscore(j,k)>0 and exptok(j,k)<t_k   )¦otherwise  
This procedure preserves the incentives of transferred tokens,and adds the additional incentive to transform tokens into tokens which represent similar skills.  This allows skill tokens to take on a price related the value of that skill in the marketplace,instead of being merely an average of every skill in the market.
EXPECTED TOKENS IN ACTION
Let’s look at how this measure might play out in the real world.Alyssa is part of the “cyber-security” community of experts,with 200 cyber-security tokens,as well as the “solidity programmers” community,with 500 solidity programming tokens  and she’s looking to join the “smart-contract security” community.The similarity score for going from cyber-security to smart-contract security is  0.4,and the similarity for going between solidity programmers and smart-contract security is 0.7.
Alyssa expected tokens in the smart-contract security community are calculated with the following equation:
(200?0.4+500 ?0.7)/2=215 expected smart contract security tokens
Alyssa thinks this number is bit high given her inexperience,and decides that she’ll start out with 200 smart-contract security tokens profitably.
Half of them she’ll transform from the “solidity programmers” community,and the rest she’ll buy on the open market.  
Alyssa first buys 100 smart-contract security tokens on the open market.Because 100 is less than 215,all of these tokens are activated.
 Alyssa then transforms 100 tokens from solidity programmers community,and the amount activated are calculated with the following equation:
100?0.7=70 activated smart contract security tokens
Leaving her with 170 activated smart-contract security tokens,and 30 deactivated.  As soon as she earns another 15 tokens in contests,she’ll also get a corresponding 15 tokens reactivated,putting her at her target number of 200 tokens.
NORMALIZING SCORES AFTER TRANSFER AND TRANSFORMATION
When coins are transferred,all scores are normalized using the equivalent of a fake contest that involves spreading the coins among all the participants,then having the transferring participant’s score being raised just enough to win an equal amount of coins from every other participant.   Because of the use of weighted averages in almost all cases,this is a relatively simple procedure that only has to be recalculated when users are entering contests.In the case of Bayesian scoring,the entire calibration curve will simply be shifted the appropriate amount,thus not changing the shape of the curve itself.
CRYSTAL CONTESTS
In Crystal,the only way to earn skills-based reputation tokens is by entering into a contest.  A contest is a community level event in which you’re competing against all others experts in the community to create the best content.  Contests can be repeating,such as trying to create the best content for the day in a Reddit-like website.They can also be one time,such as a company making a contest in where experts compete to create a new product line.
CONTEST STANDARD
All contests are implemented as smart contracts that follow a predefined standard.  The contest standard determines how coins are redistributed in expert contests,initially distributed in novice matches,and how the protocol reacts to coin transfers and transformations to that contest type.  This allows new crowdsourcing applications with varied needs to incorporate Crystal reputation into their own unique contest types that are not covered by standard Crystal contests.It also allows for various contest types to be experimented with,such as the algorithms provided by fellow crypto-reputation platforms Backfeed,Augur,Steemit,and Synereo.
MATHEMATICAL BUILDING BLOCKS 
CONTEST TYPES
There are three separate types of contests in Crystal.We chose three because we found that with just these three types,we could emulate all of the crowdsourcing websites that we’ve currently evaluated.The three contest types are:
1.	Metrics Contests: Contests in which experts compete against some objective criteria provided by an oracle.
2.	Consensus Contests:  Contests in which experts compete to please or agree with their peers
3.	Judging Contests: Contests in which experts are evaluated along subjective criteria by a judge.
METRICS CONTESTS
Metrics contests are contests in which experts’ probabilities are ultimately judged based on real world data provided by an oracle.This oracle could be a data feed provided by a provider like Oraclize it ,or could even be some sort of Schelling-point oracle  such as a Crystal consensus contest.This is analogous to crowdsourcing sites like the forecasting site gjopen.com,and the data science site kaggle.com,which both use objective real-word criteria to rate their experts.
CREATIVITY TOKENS
Creativity tokens in metrics contests are awarded based on experts trying to create something which meets some objective criteria.They may be creating products which maximize sales,creating code which minimizes errors,or creating a chess strategy that maximizes chance of winning.
To redistribute the creativity tokens in a metrics contest,we use the monte-carlo simulation that plugs probability distributions into the utility function to determine how much expected utility each submission generates.  The utility for each solution is divided by the total utility for all solutions and weighted by the amount of creativity tokens in the contest (in comparison to the average amount of creativity tokens in a contest).This is then used to create a weighted running mean for the user,and tokens are distributed by this weighted running mean.  The creativity tokens t for expert e are calculated as:
[needs work,still need to put formula]
t_e=(?_(i=1)(x_e/x_a ?t_c))/t_a 
ACCURACY TOKENS
Accuracy tokens in a metrics contest are awarded based on how well the reality of a metric matches the expert’s forecast.They may be predicting the sales of a product,the frequency of errors in a codebase,or the chance of a particular chess strategy leading to a win.  Accuracy tokens are awarded for every accuracy along every variable that goes into a utility function.  When the oracle reports the actual results,we use the Bayesian scoring rule to determine if the user’s answer improves or hurts their calibration and their final Bayes score is then used to redistribute Accuracy tokens among all users.
[needs algorithm]
CLARITY TOKENS
Clarity tokens in a metrics contest are awarded based on how much an expert’s comments on a particular submission helped other experts generate accurate predictions of performance.They may be explaining why a particular product will sell,showing where a codebase has errors,or analyzing why different chess strategies will work.

To redistribute Clarity tokens,we first have to only show explanations to a probabilistic subset of predictors.To minimize information lost,users who already have more Clarity tokens have more of a chance of their explanations being shown.  Finally,we use linear regression to determine how much impact each comment had on the bayesian score of those predictors.These coefficients are then weighted by the amount Clarity tokens in the contest,and a weighted running mean of all the contests the user participated in is created.Tokens are redistributed based on the final spread of all these scores.
[needs algorithm]
METRICS CONTESTS IN ACTION
Let’s imagine how a metric contests could be used in our smart contract security community.
One place they could definitely be used would be in the auditing of smart contracts.  For instance,a simple utility function could be defined which included the rating of the Dapp on the Dapp store in one year’s time,and the amount of bugs found in the code in one year’s time,using a clear definition of how serious something had to be to be considered a bug,and an oracle such as a Crystal consensus contest.  
Smart contract creators would then earn Creativity tokens by creating the most highly rated,bug free code,Smart contract critiquers could earn Clarity tokens by pointing out bugs in the code and problems with the design that would cause it to be rated poorly,and Smart Contract evaluators would predict the number of bugs and rating on the Dapp store.  At the end of a year,once these values were known,reputation tokens would be distributed accordingly.
CONSENSUS CONTESTS
Consensus contests measure community agreement on a subject.They can be used as Schelling-point oracles similar to Augur’s reputation metric,to rank options against each other based on their community acceptance as in Steemit,or to gauge a communities take on intangibles such as rating how beautiful a piece of artwork is.  This is analogous to crowdsourcing sites such as the tech advice site StackExchange,which use consensus based mechanisms to rank their participants.  
CREATIVITY TOKENS
Creativity tokens in consensus contests are awarded based on meeting a utility function just like metrics contests,with the difference being that there’s no ultimate reality that decides the outcome.  They can be earned by creating a forum post that the community likes,creating a mission statement that the community agrees is good,or writing code that the community determines is beautiful.
ACCURACY TOKENS
Accuracy tokens in consensus contests are awarded based on how well an expert’s opinion matches the weighted opinion of a community.  They may be trying to determine how much  the community likes a forum post,rating how good a mission statement,or trying to determine the level of beauty of a piece of code.
To redistribute Accuracy tokens,the main scoring tool is to take the final pooled distributions,and,and compute the information gain between those distributions and the experts initial distribution,as an inverse correlation between the information gain and the final score.This is then weighted by the amount of Accuracy tokens in the contest,and computed as a running mean among all other contests that expert has participated in.The coins are redistributed based upon these final numbers.

[needs algorithm]
CLARITY TOKENS
Clarity tokens in consensus contests are awarded based on how well an expert’s explanation helps other experts minimize their information gain.They may be trying to explain the merits of a forum post,debate the finer points of a mission statement,or giving reasons that a given piece of code is beautiful.
Clarity tokens are redistributed much the same way as they are in metrics contest,except that instead of the Bayesian score,the inverse information gain is used as the second variable in the correlation.This score is then weighted by total Clarity tokens in the contest,and computed as a running mean among all contests that user has participated in.These scores are used as the basis for distribution of Clarity tokens.
[needs algorithm]
CONSENSUS CONTESTS IN ACTION
Let’s imagine how a consensus contest might be used in our smart contract security community
Secondly,as mentioned above,consensus contests could be used as a kind of decentralized oracle for metrics contests,using the game theoretic mechanism of Schelling Score.  If you made a consensus contest for instance around how many bugs had been found in a particular contract over the past year,you’d be incentivized to count the obvious bugs that everyone else would also count,and everyone would most likely cluster around the same set of numbers at roughly the same probabilities.  This allows you to have metrics contests without any worry of centralization.
JUDGING CONTESTS
Judging contests are subjective contests.If this option is chosen,a judge ultimately rates the ideas (although voters can still help to eliminate options and guide the judges).  Pre-judgement scores are also weighted by similarity between the judge and the experts,in order to show the judge the proper weighting before they make their decision(s).This is analogous to crowdsourcing sites such as the design site 99designs,which use subjective criteria to choose winners.
CREATIVITY TOKENS
Creativity tokens in judging contests are awarded based on experts trying to produce content that the judge approves of.  They may be trying to create a design that pleases the judge,tell a joke that the judge thinks is funny,or creating a post that a judge likes.
The redistribution of Creativity tokens is nearly identical to metrics contests with one important exception.Instead of an oracle reporting on an objective criteria,the judge reports on a subjective criteria.
ACCURACY TOKENS
Accuracy tokens in judging contests are awarded based on the experts having the same criteria as an individual judge.They may be trying to guess how much a design will please the judge,predict what a judge would find funny,or forecast which post a judge would like.
Accuracy tokens in judging contests are redistributed based on one of two criteria.  In one criteria,the judge chooses a single winner,and the Bayesian scoring rule is used to score accuracy tokens.The weight of any given contest on the ultimate Bayes score of the participant is weighted based on the Honesty score of a particular client,in order to neutralize collusion.  In the other criteria,the judge rates all submissions,and the inverse information gain between the judge’s ratings and each expert’s rating is used as the criteria.
CLARITY TOKENS
Clarity tokens in judging contests are awarded based on how well an expert’s explanation helps an expert please the judge.  They may be trying to explain the merits of a forum post,say why a particular design is good,or giving reasons that a given piece of code is beautiful.
Clarity tokens are redistributed much the same way as they are in metrics contest and consensus contests.
JUDGING CONTESTS IN ACTION
Let’s look at how judging contests might play out in our smart contract security community.
While security seems like a mostly objective goal,with little room for subjectivity,it’s nonetheless possible to imagine a scenario in which you might want to include a judging criterion in a contest.  One example might be for decentralized commit access to an open source smart contract.While the ultimate goal might be full decentralization,it might be pertinent to start out with a long time contributor acting as judge,looking at things like coding standards and code clarity to make their judgements.Only once community members had learned the judge’s tastes (and those who didn’t eliminated from the pool) would the commit access become fully decentralized with a consensus contest.
ONBOARDING USERS IN CRYSTAL
Crystal has two distinct ways to earn these three tokens:  
1.	Novice Matches,involving contestants who are working to earn newly minted crystal colored tokens.
2.	Expert Contests,involving expert contestants gaining and losing tokens from each other.

By separating the two ways to earn tokens,we have a smooth path for which users can work towards earning money on the platform while learning community norms and improving their skills.
NOVICE MATCHES
Novice Matches allow new users to grow their affinity score and earn Crystal tokens as a new member of a community.  They’re scored very differently from expert contests,and must use a separate Sybil defense mechanism because they can’t use token ownership as a proxy.   Every contest contract can specify a corresponding novice match protocol,and if so,will have a mirrored version of all expert contests using that protocol.  The general format of novice matches is as follows
1.	Only accounts without Crystal Tokens in that community can participate in the matches
2.	All accounts must complete a nominal task such as a captcha to participate in matches for that month.
3.	Only accounts with an affinity score of .5 can earn token in those matches.
4.	Novice Matches are played out over the course of a month.  At the end of the month,all qualified participants are given a percentage of the newly minted Crystal tokens,based on their performance in the novice matches that month.
For Crystal’s three contest types,the Novice Matches play out very similarly to how the expert contests described above play out.  The difference being that instead of coins being used to determine the level of someone’s influence for Accuracy tokens,an influence limiter function using a reputation score is used before the Bayesian Scoring function as described by Resnik and Sami in their paper The Influence Limiter: Provably Manipulation-Resistant Recommender Systems .
The central insight for using an influence limiter is the same as that used to rate consensus contests - a user should raise their reputation if weighing them more would have created a smaller information gain in previous predictions.
[needs algorithm]
Because there’s no notion of pooling influence to create Sybil attacks for creativity tokens or clarity tokens,those are scored much the same as described for expert contests,with the amount of coins in the expert contest being used for the weight,and everyone starting with some nominal score like .001.
EXPERT CONTESTS
Once an expert has accumulated some tokens,they can enter expert contests.Expert contests are the only way in which experts can be paid by Clients on the system,and are used as the basis for which winning entries are presented to the Client.
All expert contests in Crystal follow the same basic format.First,experts compete to meet the goals of the campaign as defined by the Client.Based on how well the expert does,they may earn reputation from other experts,or lose reputation to those experts.Then,based on how much reputation they have when the contest closes,they earn a portion of the fee that the Client paid for the contest deliverables.
Because influence in expert contests is limited by tokens,they already have an effective Sybil defense,which holds below 50% of contest participants being Sybil accounts.
CAMPAIGNS VS CONTESTS
From the Client's perspective a campaign is a single unified event in which people compete to deliver a multi-faceted solution for the Client.However,from the perspective of experts looking to earn Clarity tokens and Accuracy tokens,each campaign will be broken up into a number of different contests centered on each variable in the utility function.In this way contest participants function as a team,utilizing creatives,evaluators and critics from varying communities,each of whom are specialized in their expertise.  The results from all these contests are then combined using a monte-carlo simulation,to give the client the answer,task,or submission that best fits their overall criteria.

GOVERNANCE
Crystal’s base governance layer at its core is a simple standard that can be extended with smart contracts to encompass arbitrary governance protocols.This standard defines governance for each individual Crystal Community,as well as governance at the protocol level,called CrystalDAO,which defines global rules about interactions between and within every community.
On top of this standard we build two primary forms of governance.The first we’ve named value-weighted voting,which is a democratic voting mechanism that gives more weight to those who offer more value to the system,as well as those who hold the values the system prizes.The second we’ve named reputarchy,which extends value-weighted voting by allowing those with higher weights to set the goals and directions,then allows experts who have proven they’re good at fulfilling those goals to make decisions.  
For individual communities,governance is decided at the point of creation.The plan for the CrystalDAO is to start with value-weighted voting,and build in incentives (similar in spirit to Ethereum’s difficulty bomb ) to switch to reputarchy as the ecosystem of expert communities matures.
GOVERNANCE STANDARD
Crystal’s governance standard is a simple flexible standard that allows for the suggestion of proposals,the execution of actions,and the ability to assign these powers through a system of hierarchical permissions.  Because proposals and actions can be arbitrary code or function calls,and permissions can be assigned to smart contract,this system allows for a standard interface that any governance protocol can be plugged into.  Nexusdev’s dappsys framework  already includes most of this functionality,and we’re currently investigating the possibility of adapting it for our purposes.
VALUE-WEIGHTED VOTING
Value-weighted voting is our name for Crystal’s method of distributing voting rights to people that add value to the Crystal ecosystem,and then limiting those voting rights based on if those people meet the core values of the ecosystem.The measure of whether or not they meet the values of ecosystem is always the same - their community score.
However,the measure of how much value is being brought into the ecosystem varies based on whether the stakeholder is an expert or a client.Experts and clients each get 50% of the overall voting stake.
EXPERTS
An expert brings value to the system every time they participate in a contest- the more expertise an expert has,the more value is added by them participating in a contest.  Experts have 50% of the vote among all stakeholders.Relative stake among experts is distributed every time an expert participates in a contest,and is decided by the amount of activated reputation tokens that a particular expert has in the community,the size of the contest relative to all other contests,and the Affinity score the expert has with that community.  The equation for an individual expert e’s relative stake s from contest c,d days after the end of the contest is:
[needs work,allows for contest spamming (although gas may make that unprofitable)]
s_(e ) (d)=(365(a))/d?t_c/t_a ?  t_e/t_t   

To break down that equation,we’re taking the ratio of tokens in that contest to average tokens in a contest (tc
/ta) multiplying that by the ratio of tokens the expert holds to total tokens in the community (te
/tt),multiplying all that by the experts affinity score to the community (ae) and finally multiplying that by 720 divided by the total number of days since the contest ended (720
/d).  This means an expert with an average amount of tokens and average affinity score participating in an average sized contest will get a relative stake that steadily decreases towards 1 over the period of 365 days,and towards 0 over that.
CLIENTS
A client brings value to the system by creating paid contests that inject money into the system and provide incentives for experts to join and participate in the platform.Clients have 50% of the vote among all stakeholders.  They get a stake in the system every time they create a contest which is then weighted by their Affinity score.
 
However,these votes are not permanent.Instead,the strength of that vote decays linearly over time.  The relative stake depends on the difference between the mean fee paid by all Clients in all communities,and the fee paid by this specific client in this contest.The specific formula for the relative stake s that a client gains from a contest c over time is:
[needs work,allows for contest spamming (although gas may make that unprofitable)]
s_c (d)=365a/d(r_c/r_a +t_c/t_a ) 
Where a is the client’s affinity score,rc is the reward for the contest,d is the time in days since the creation of the contest,and ra is the average contest reward.tc is the total amount of tokens in the contest and ta is the average amount of tokens in all contests in the community.This means that for an average priced contest,with an average affinity score of.5,with the average amount of tokens owned by users participating the stake will trend steadily towards 1 over a period of roughly 365 days,and steadily towards 0 after that.For average unpaid contests,the period for which it trends towards 1 is ~182 days.
REPUTARCHY
Reputarchy is Crystal’s name for a governance system which uses Crystal’s reputation and community mechanisms to give decisions to those communities which have proven they’re best at making them.  If futarchy  is described “vote on values,bet on beliefs,” then reputarchy could be described as “vote on values,crowdsource beliefs.”  The community (potentially using value-weighted voting) merely chooses the goals and values for the upcoming year,and then Crystal’s communities hold contests that determine the best way to meet those values and goals.
REPUTARCHY STEP BY STEP
Reputarchy follows a three step process,in which the community chooses a utility function,chooses actions to undertake based on that utility function,and then implements those actions.
CHOOSING A UTILITY FUNCTION
A key part of reputarchy is choosing a utility function.There are three ways that the values and goals in reputarchy could be implemented in a utility function using Crystal.  Firstly,they could be an entirely subjective set of values and goals described in plain language and voted on by constituents,given to experts to both interpret and implement using consensus contests.  Secondly they could be an objective set of metrics voted on by constituents,given to experts to optimize then measured using objective contests.Thirdly,they could be a subjective set of metrics combined from constituents using for instance a Likert Scale,then measured using judging contests.
CHOOSING ACTIONS TO TAKE
Once a utility function is chosen,the next step is to choose a number of trusted communities known to do good work in a variety of different disciplines.  At regular intervals (weekly,monthly),a contest will be held in each of these communities,asking “What’s the best thing we should do around your expertise to maximize our utility?” The utility of every idea in every community will be compared,to find the ideas that have the best chance among all actions in all contests of fulfilling the organization's utility will be selected
TAKING ACTION 
Finally,the actions need to be implemented.  Requests for proposal will be created for each action determined in the previous steps,and the proposals themselves will be submitted into a Crystal contest.  The proposals can be submitted by traditional contractors,or Crystal communities themselves,who will crowdsource the work using contests.All possible proposals will be ranked against their utility in the utility function,and the money to implement the action will go to the winner.
REPUTARCHY IN ACTION
How might a reputarchy might play out in our contract-security community?  To show the flexibility of our utility function standard,we’ll imagine a utility function that combines the three value types mentioned above.
utility = # of paid contest created ×% agreement that community met mission 
×Value-weighted likert #
After the contests were completed,the project with the highest overall utility might be forecasted to be the smart-contract insurance platform.  A request for proposal would be sent out for each of the various actions needed to launch the platform.  The smart-contract community itself might create a proposal to write the smart-contract backend of the software.  While typically this could be considered a conflict of interest,the buffer of the utility function means that in fact these types of accusations can be completely removed.The smart-contract community,being the world experts in writing smart contracts,would end up winning the RFP contest.  
Finally,the money allocated towards this action would be put towards a “best backend” contest,and the backend which was forecasted to best meet the utility function would be selected among all backends submitted by participants.The money allocated for this contest would be distributed to experts relative to how well they performed in the contest.
USE CASES OF REPUTARCHY
While reputarchy will likely first be implemented in Crystal communities,the real power of it comes when other DAOs and traditional organizations begin to implement it.This will mark a shift at which organizations will have to be upfront about exactly what they’re optimizing for,and individuals get payed only for their performance.This will severely limit the ability to play politics within an organization.
 
CRYSTALDAO
The CrystalDAO is the organization which is in charge of running the central protocol and overseeing the growth and maintenance of the entire Crystal ecosystem.  CrystalDAO plans to start with a stake-weighted voting governance mechanism,then later switch to a reputarchy governance mechanism as the ecosystem of expert communities matures.

MAKING A PROFIT
CrystalDAO makes money by taking a small cut of the reward from every paid contest in every community.  This reward then goes into the Crystal smart contract,where it can be used to help fund new communities,bolster existing communities,create better infrastructure,or be passed on to vote holders in the form of weekly payments.

REFERRAL INCENTIVES
Every user on the Crystal platform can receive referral incentives for referring other active users who add value to the Crystal platform,whom also get an incentive for signing up under their friend.  An active user is anyone whom has received a vote in Crystal’s value-weighted voting scheme.  Once that user receives a vote,both the referrer and the referred receive a reward of Crystal Clear tokens.
CRYSTALDAO GOVERNANCE ACTIONS
As the parent organization,CrystalDAO is in charge of taking actions that cause the ecosystem to flourish.What follows is a list of some of the most important actions that CrystalDAO can take
SETTING CRYSTAL TOKEN ISSUANCE RATE
Issuance of new tokens in Crystal is set at a steady monthly limit,which can be tweaked by the stakeholders.  This is analogous to a central bank which is incentivized to maximize the value of the tokens.Newly issued tokens are split percentage wise among all the communities,and are created to fuel novice matches and allow the onboarding of new users into Crystal communities.
SETTING CRYSTAL TOKEN BUY AND BURN RATE
Just as it may be prudent to issue more tokens in order to onboard more users onto the platform,it may also make sense to shrink the supply in order to raise the value of Crystal tokens.  For this purpose,the Crystal has an ongoing offer to buy and burn tokens at a price set by the DAO.  While this price will typically be set to 0,it may be raised above market value if the supply is growing too fast,in order to incentivize burning of tokens and shrink the supply.
CHOOSING CORE VALUES
The CrystalDAO is in charge of choosing its own core values.  These core values will in turn determine the value-weight of all votes in the parent organization,based on those voters’ affinity scores with the organization's core values.
ADDING AND REMOVING MEMBERS FROM THE START SET
For each of the core values,the CrystalDAO can choose members whom they view as paragons of those values,and add them to the start set.  If it comes to light that a person has a different character than previously assumed,they can be removed from the start set.
SETTING CONTEST FEE
Every contest on the crystal platform has a small percentage fee taken from it,which goes to the parent organization.  The CrystalDAO sets this fee at such a level to be competitive,while still allowing maintenance and growth of the platform.
SETTING STAKE-WEIGHTED PAYMENTS
Every week,a small amount of earnings are taken from the CrystalDAO and issued to stakeholders,weighted by their stake.  The CrystalDAO votes on this amount.
UPDATING THE PROTOCOL AND GOVERNANCE RULES
The CrystalDAO is in charge of creating updates to the protocol,as well as to its own governance rules.
SENDING MONEY
The CrystalDAO can send money to any account on the Ethereum platform.This may be in payment to a contractor,as a stimulus to an individual community,or for any other reason.
COMMUNITY GOVERNANCE
Communities are places where experts can gather,converse,and work together to provide value to each other or to clients.  Every community has different goals and purposes,defined by their members and core values.
CREATING A COMMUNITY
Communities are created in stages.  
First,the idea for a community is proposed.  Potential participants in the community will begin to interact with each other,tagging each other with value tags as they discuss the community.
Then,some group of founding members will then initialize the community by choosing a governance mechanism,and choosing the initial rules for every aspect of the community.  Core values can be chosen by looking at commonly tagged values between founding members.
From there,a community defined initialization period commences during which any person can commit Crystal Clear reputation to the system,turning it into initial reputation for the community at 100% activation rate.  
After the initialization period,the community starts,and people begin to start creating and participating in contests.At this point,the community rules and values can be changed according to the chosen community governance protocol.Other crystal tokens can enter the community according to the normal rules.
COMMUNITY GOVERNANCE ACTIONS
CHOOSING CORE VALUES
The community is in charge of choosing its own core values.  These core values will in turn determine the value-weight of all votes in the parent organization,based on those voters’ affinity scores with the organization's core values.
ADDING AND REMOVING MEMBERS FROM THE START SET
For each of the core values,the community can choose members whom they view as paragons of those values,and add them to the start set.  If it comes to light that a person has a different character than previously assumed,they can be removed from the start set.
SETTING CONTEST FEE
Every contest in the community has a small percentage fee taken from it,which goes to the community.  The community sets this fee at such a level to be competitive,while still allowing maintenance and growth of the community.
CHOOSING PRIVILEGED CONTEST TYPES
Every community chooses some subset of contest types that it considers privileged.These contest types are allowed to distribute new tokens through novice matches,and also distribute stake to the CrystalDAO through participation.
UPDATING CONTESTS AND GOVERNANCE RULES
The community can choose to update its privileged contests to new versions,as well as changing its governance contract.
SENDING MONEY
The community can send money to any account on the Ethereum platform.This may be in payment to a contractor,or for any other reason.

USE CASES
DECENTRALIZED APPLICATIONS
Decentralized applications (Dapps) have a particular problem that other applications don’t have.They often need to make decisions that require human judgement,but giving the decision to any one person or small group of people can end up re-centralizing that app by concentrating power.  With Crystal,all of these human judgements can be made in decentralized way.For instance,one can moderate content without a centralized moderator,settle user disputes without a single company to handle support,identify trusted nodes for distributed work,and even create truth oracles that provide trusted data without relying on a single source.
RATING AND GRADING
Ratings and grades are notorious for creating adverse incentives that cause bad behavior.  The centralized review site Yelp has been accused of extorting business to bury negative reviews ,and teachers have been known to give their students the correct answers on standardized tests .  With Crystal,you can democratize education through decentralized assessments,create cheaper insurance through crowdsourced risk assessments,and disintermediate review websites with reviews and ratings that can't be gamed.
COLLABORATIVE CROWDSOURCING
Anything that can be created by an individual on a computer,can be created by Crystal crowdsourcing.  With Crystal,the things built are optimized to meet your exact goals or preferences,and are typically better results than you would receive by contracting a single expert.  You can have software reviewed by thousands of reviewers.You can create a compelling creative book,and give royalties based on how much each person contributes.You can even design cars,buildings or organizations,all at a cheaper price point,and likely greater quality,than expert work.
PORTABLE REPUTATION
With Crystal,you can earn reputation once,and take it everywhere.  This means that low quality internet comments will be buried,as the best commenters earn their reputation and take it from site to site.  Instead of needing to prove yourself on new marketplaces,you can take it with you from e.g.   Amazon to eBay.  Finally,the sharing economy will be so much safer.  Your Uber,Airbnb,and Snapgoods reputation will all be linked,allowing every user to get a full measure of the service they will receive.
DECISION MAKING
With Crystal,making decisions will be decision-theoretically optimized according to your goals.  Want to get individual advice on buying shoes that look great and last forever?  With Crystal,the crowd will find the perfect pair for you that balances those two goals.  Business strategy will forever be changed as companies find out that their CEOs’ decisions can be matched or beaten by communities,with lower price points.  Eventually,countries may even jump on the reputarchy bandwagon.
FORECASTING
Knowing future possibilities is crucial to wellbeing of millions of people.  Wouldn’t it be great to know the likelihood of a major war springing up in the next year or the chance of an earthquake in California in the next six months?  With Crystal,large events,natural disasters,and existential risks,can all be given precise probabilities.These probabilities have been shown to outcompete even the top forecasting experts ,and are of similar quality to prediction markets .
AI AUGMENTATION
Training AI systems to interact with human systems is a common goal,but the existing approaches suffer from limited training data and poor specification of human values.Crystal can solve these problems and create a synergistic effect between AI and humans.  Using the Crystal protocol,for the first time there’s an API for human ingenuity,which communities can be plugged into in order to solve problems AIs can’t.The AIs can then use these contests as training data,significantly reducing the effort needed to compile such a data set.  Finally,these AIs can be used to further assist humans,completing the cycle.In general it is assumed that participants in Crystal communities can be human,AI or humans augmented by AI.
CONCLUSION
For the first time,Crystal makes possible credible and immutable reputation metrics that represent the attributes we care about in the real world.  Our value rank algorithm allows any humans’ values to be quantified using the notion of transitive trust.  Our Crystal tokens allow any humans’ skills to be quantified using basic decision-theoretic criteria.
By combining this reputation with a novel method for flexible crowdsourced contests,we can harness the wisdom of the crowd to out compete experts.This method has far reaching implications for governance,decision making,and society at large.
APPENDIX A - MATHEMATICAL BUILDING BLOCKS
UTILITY FUNCTIONS
A utility function is a mathematical representation of preferences.In decision theory,they're central to the concept of making sound decisions,and for that reason they're the basis of Creativity tokens in Crystal.One's creativity will be scored based on how well one can generate options that maximize a given utility function.In addition,for each input into a utility function,a contest will be created to earn Accuracy and
/or Creativity tokens.
Because there are near limitless representations of utility functions,Crystal must allow for the possibility of arbitrary complexity.  Given this constraint,each utility function will be its own smart contract on the Ethereum platform.  These smart contracts will have standard functions,which input any number of variables through a contest format,and output a number.  The higher the number,the more utility received.
Utility functions are hard to grasp for the average users,and we’re actively looking into easy ways to intuitively create utility functions,including LENS modeling,willingness to pay models,visual equation builders,and premade utility function libraries.  It’s also worth noting that for many applications,utility functions won’t have to be created by the user,as the utility function will be premade by the front-end dapp,as in our examples with smart-contract security.
SCORING RULES AND DIVERGENCE MEASURS
Power Rule with Baseline: S_?^P (r,e_j ?q?)=((r_j?q_j )^(?-1)-1)/(?-1)-(?_(i=1)^n??(?r_i (r_i
?q_i )?^(?-1))?  - 1)/? 
Pseudospherical Rule with Baseline: S_?^S (r,e_j ?q?)=1/(?-1)(((r_j?q_j )/(?_(i=1)^n?(?r_i (r_i
?q_i )?^(?-1) ) )^(1??) )^(?-1))-1
Where ? is any real number,r is a reported distribution,e is an event,with j being the actual outcome and I being the reported outcome,n is the total number of outcomes,and q is the baseline distribution.
Each can be extended to include sensitivity to distance with the following equations.
S ?_?^P (r,e_j ?q?)=?_(i=1)^(j-1)?S_?^P (R_i,e_2 ?Q_i)?+?_(i
=j)^(n-1)??S_?^P (R_i,e_1 ?Q_i ?)?
Power rule with baseline and sensitivity to distance.

The incorporation of a baseline distribution also allows the possibility for emulation of market scoring rules ,a creation of Robin Hanson which use previous information gained from forecasters as the baseline.
By incorporating both the discrete and continuous cases of these two constructions,we can allow every contest to use the scoring rule that bests suits their needs,whether through a website choosing this option for their users,or by creating a wizard through which a client can choose the scoring rule that best fits their needs.
POOLING ALGORITHM
The pooling algorithm is the algorithm which combines probability distributions into a single distribution.A pooling algorithm can be as simple as a weighted average,known as linear pooling,with Accuracy tokens used for the weight.There are several other algorithms which are shown to be more accurate by engaging in a process known as extremizing.An active area of our research is around the tradeoffs to be made in terms of simplicity,gas costs,and accuracy in the areas of pooling and bayesian scoring rules.
MONTE CARLO SIMULATION
A Monte-Carlo simulation for our purposes is a way to brute-force input the results from an aggregated probability distribution into a utility function.  It can then be used to show how different submissions rank in regards to that utility function.  Monte-carlo methods are very expensive,and it may be that we cannot find a suitable method that also costs sufficient gas.If this is a case,a “shadow chain” will be used,a concept first described in a blog post by Vitalik Buterin .
 APPENDIX B – CRYSTAL’S STANDARDS
These are draft versions of Crystal’s standards for governance,reputation,and crowdsourcing standards.We present methods to represent all our standards in an ABI that can be understood by Ethereum smart contracts,as well as specified in the resource description framework (RDF),an XML format which is parsable by computers as well as human readable.  All standards below should be considered drafts,and not necessarily representative of the final standards.
IDENTITY STANDARD
Crystal’s identity standard gives a simple flexible way to map identities to Ethereum addresses as well as accounts on other websites.  While not mentioned in the whitepaper,its use is critical to future-proofing Crystal,as a single identity description is not yet available.
FUNCTIONS

RDF DEFINITION
REPUTATION STANDARD
The Crystal reputation standards defines two standard flavor of reputations.  The first is categorical reputation,which can flexibly define badges or states that an individual is rated with,and in the former case can be transformed to work with the Mozilla open badge standard.  The second is numerical reputation,which treats reputation as a continuous or non-continuous scores.  Each smart contract can represent one “measure” of reputation,which can then have multiple hierarchical “categories” that the reputation measure can be used in.
For instance,in Crystal’s system,the A through F grading system would be the categorical flavor (with every grade being an optional category and “Basic Arithmetic” might be a general category,with a subcategory 
Functions
*	getReputationMinimum
*	addReputationCategory(bytes32 parentID,bytes32 rephash,bytes32 URL) returns (bytes32 ID);
adds a new category 
o	parentID is the id of the parent.0 means no parent.
o	RDFhash represents the hash of the reputation information,represented in Crystal’s RDF reputation format.
o	URI represents the link at which you can access the full RDF description,which could be an IPFS link,a standard web link,or data stored in the smart contract)

TOKEN TO REPUTATION MAPPING STANDARD
CONTEST STANDARD
GOVERNANCE STANDARD
UTILITY FUNCTION STANDARD
  https://longitudeprize.org/history
  Galton, F. (1907). "Vox populi". Nature, 75, pp. 450–451.
  http://presnick.people.si.umich.edu/papers/postcards/PostcardsFinalPrePub.pdf
  
https://scholar.google.com/scholar?ion=1&espv=2&bav=on.2,or.r_cp.&biw=1366&bih=667&dpr=1&um=1&ie=UTF
-8&lr&cites=4085997296011241419
  https://www.iarpa.gov/index.php/research-programs/ace
  http://www.npr.org/sections/parallels/2014/04/02/297839429/-so-you-think-youre-smarter-than-a-cia-agent
  http://www.truthcoin.info/blog/contracts-oracles-sidechains/
  https://github.com/ethereum/EIPs/issues/20
  http://dl.ifip.org/db/conf/ifiptm/ifiptm2007/Traupman07.pdf
  http://www.cc.gatech.edu/~lingliu/papers/2012/XinxinFan-EigenTrust++.pdf
  http://www.npr.org/sections/parallels/2014/04/02/297839429/-so-you-think-youre-smarter-than-a-cia-agent
  http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2660628
  http://www.oraclize.it/
  https://blog.ethereum.org/2014/03/28/schellingcoin-a-minimal-trust-universal-data-feed/
   P. Resnick and R. Sami, “The influence limiter: Provably manipulation resistant recommender systems,” in ACM 
RecSys ’07, pp. 25–32, ACM, 2007
  http://ethereum.stackexchange.com/questions/3779/when-will-the-difficulty-bomb-make-mining-impossible
  https://github.com/nexusdev/dappsys
  http://mason.gmu.edu/~rhanson/futarchy.pdf
  http://www.huffingtonpost.com/news/yelp-extortion/
  http://abcnews.go.com/US/atlanta-cheating-178-teachers-administrators-changed-answers-
increase/story?id=14013113
  http://www.npr.org/sections/parallels/2014/04/02/297839429/-so-you-think-youre-smarter-than-a-cia-agent
  http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2660628
  https://faculty.fuqua.duke.edu/~rnau/scoring_rules_and_generalized_entropy.pdf
  http://mason.gmu.edu/~rhanson/mktscore.pdf
  https://blog.ethereum.org/2014/09/17/scalability-part-1-building-top/

unfinished sentence
 
 

 
 

10

